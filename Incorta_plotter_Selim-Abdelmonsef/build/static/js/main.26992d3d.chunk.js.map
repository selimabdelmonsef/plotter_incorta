{"version":3,"sources":["sharedpreferences/chart/chart.module.css","components/plotter_page/plotter_page.module.css","constants/actions_constants.js","redux/redux-actions/plotter_data_action.js","sharedpreferences/chart/chart.js","components/plotter_page/plotter_page.js","redux/redux-actions/dimensions_measures_action.js","App.js","reportWebVitals.js","redux/redux-reducers/dimensions_measures_reducer.js","redux/redux-reducers/plotter_data_reducer.js","redux/redux-reducers/main_reducer.js","constants/apis.js","redux/redux-saga/plotter_data_saga.js","redux/redux-saga/dimensions_measures_saga.js","redux/redux-saga/index.js","redux/index.js","index.js"],"names":["module","exports","GET_DIMENSION_MEASURE_DATA","GET_PLOTTER_DATA","GET_DATA_SUCCESS","GET_DATA_FAIL","GET_PLOTTER_DATA_SUCCESS","GET_PLOTTER_DATA_FAIL","_GetPlotterData","payload","type","Chart","props","state","dataLine","noDataYet","labels","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","data","a","this","plotterData","values","map","dimensionsValue","setState","measuresValue","index","forEach","dataset","push","parseInt","getMeasures","getDimensionsData","className","styles","chartStyle","options","responsive","height","React","Component","connect","PlotterDataReducer","dispatch","GetPlotterData","onSucess","PlotterPage","onDragStart","event","taskName","dataTransfer","setData","handleDrag_1","dragError","chartComplete","console","log","onDragOver","task","preventDefault","onDropDimension","function","handleDrag_2","handleDragMeasure","measures","name","dimension","onDropMeasure","GetDimensionsMeasuresData","Table","bordered","loading","textLoading","length","element","draggable","style","paddingTop","block_1","onDrop","onClick","cancelRequest","block_2","errorStyle","DimensionsMeasureReducer","_GetDimensionsMeasuresData","App","path","exact","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initState","error","rootReducer","combineReducers","action","api","getPlotterDataSaga","rootSaga","getPlotterData","Axios","post","call","plotterDataResponse","status","put","all","takeLatest","getDimensionsMeasuresDataSaga","getDimensionsMeasuresData","get","DimensionsMeasuresDataSaga","sagaMiddleware","createSagaMiddleware","enhancers","applyMiddleware","enhancer","composeWithDevTools","store","createStore","run","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.26992d3d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"chartStyle\":\"chart_chartStyle__jIK_j\",\"noDataStyle\":\"chart_noDataStyle__1K11A\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"block_1\":\"plotter_page_block_1__3tEBJ\",\"block_2\":\"plotter_page_block_2__3ng9Z\",\"errorStyle\":\"plotter_page_errorStyle__3NBsd\",\"textLoading\":\"plotter_page_textLoading__WAzOK\",\"cancelRequest\":\"plotter_page_cancelRequest__3wa7q\"};","export const GET_DIMENSION_MEASURE_DATA = \"GET_DIMENSION_MEASURE_DATA\";\nexport const GET_PLOTTER_DATA = \"GET_PLOTTER_DATA\";\nexport const GET_DATA_SUCCESS = \"GET_DATA_SUCCESS\";\nexport const GET_DATA_FAIL = \"GET_DATA_FAIL\";\nexport const GET_PLOTTER_DATA_SUCCESS = \"GET_PLOTTER_DATA_SUCCESS\";\nexport const GET_PLOTTER_DATA_FAIL = \"GET_PLOTTER_DATA_FAIL\";\n","import {GET_PLOTTER_DATA} from '../../constants/actions_constants'\nexport const _GetPlotterData = (payload) => {\n\n    return {\n        type: GET_PLOTTER_DATA,\n        payload: payload\n    }\n \n}","import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\n\nimport { _GetPlotterData } from \"../../redux/redux-actions/plotter_data_action\";\nimport { Line } from \"react-chartjs-2\";\nimport { MDBContainer } from \"mdbreact\";\nimport styles from './chart.module.css'\n\nclass Chart extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            dataLine: {\n                noDataYet: false,\n                labels: [],\n                datasets:\n                    [\n                        {\n                            label: \"Measures vs Dimensions\",\n                            fill: true,\n                            lineTension: 0.1,\n                            backgroundColor: \"rgba(184, 185, 210, .3)\",\n                            borderColor: \"rgb(35, 26, 136)\",\n                            borderCapStyle: \"butt\",\n                            borderDash: [],\n                            borderDashOffset: 0.0,\n                            borderJoinStyle: \"miter\",\n                            pointBorderColor: \"rgb(35, 26, 136)\",\n                            pointBackgroundColor: \"rgb(255, 255, 255)\",\n                            pointBorderWidth: 10,\n                            pointHoverRadius: 5,\n                            pointHoverBackgroundColor: \"rgb(0, 0, 0)\",\n                            pointHoverBorderColor: \"rgba(220, 220, 220, 1)\",\n                            pointHoverBorderWidth: 2,\n                            pointRadius: 1,\n                            pointHitRadius: 10,\n                            data: []\n                        }\n                    ]\n            }\n        }\n    }\n    async getDimensionsData() {\n        this.props.plotterData[0]?.values?.map((dimensionsValue) => {\n            this.setState({\n                dataLine: this.state.dataLine = {\n                    datasets: this.state.dataLine.datasets,\n                    labels: [...this.state.dataLine.labels, dimensionsValue]\n                }\n            })\n        })\n        // console.log(this.props.plotterData)\n    }\n    async getMeasures() {\n        this.props?.plotterData[1]?.values.map((measuresValue, index) => {\n            this.state.dataLine.datasets.forEach((dataset) => {\n                dataset.data.push(parseInt(this.props.plotterData[1].values[index]));\n            });\n        });\n        // console.log(this.props.plotterData[1].values)\n        // console.log(this.state.dataLine.datasets[0])\n    }\n\n\n    componentDidMount() {\n        this.getMeasures();\n        this.getDimensionsData();\n    }\n    render() {\n        return ( \n            <div>\n                <MDBContainer className={styles.chartStyle}>\n                    <Line data={this.state.dataLine} options={{ responsive: true }} height={130} />\n                </MDBContainer>\n            </div>\n\n\n        )\n    }\n}\nconst mapStateToProps = (state) => {\n    return {\n        plotterData: state.PlotterDataReducer.data,\n    };\n};\n\nconst mapDisaptchToProps = (dispatch) => {\n    return {\n        GetPlotterData: (data, onSucess) => {\n            dispatch(_GetPlotterData(data, onSucess));\n        },\n    };\n};\n\nexport default connect(mapStateToProps, mapDisaptchToProps)(Chart);\n\n\n","import React, { Component } from 'react';\nimport Table from 'react-bootstrap/Table';\nimport styles from './plotter_page.module.css'\nimport { connect } from \"react-redux\";\nimport { _GetDimensionsMeasuresData } from \"../../redux/redux-actions/dimensions_measures_action\";\nimport { _GetPlotterData } from \"../../redux/redux-actions/plotter_data_action\";\nimport Chart from '../../sharedpreferences/chart/chart'\n\nexport let dimensionValue = \"\";\nexport let measureValue = \"\";\nclass PlotterPage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            handleDrag_1: \"\",\n            handleDrag_2: \"\",\n            handleDragMeasure: \"\",\n            dragError: \"\",\n            chartComplete: false,\n        }\n    }\n    componentDidMount() {\n        this.props.GetDimensionsMeasuresData();\n        //    console.log(this.props.loading)\n        //    this.props.GetPlotterData();\n        // this.props.GetPlotterData({\n        //     measures: [\"Cost\"],\n        //     dimension: \"Product\"\n        // })\n        // console.log(this.props.plotterData)\n    }\n    onDragStart = (event, taskName) => {\n        event.dataTransfer.setData(\"taskName\", taskName);\n        this.setState({\n            handleDrag_1: taskName,\n            dragError: \"\",\n            chartComplete: false,\n        })\n        console.log(this.state.handleDrag_1)\n    }\n    onDragOver = (event, task) => {\n        event.preventDefault();\n    }\n    onDropDimension = (event, taskName) => {\n        if (this.state.handleDrag_1.function === \"dimension\") {\n            this.setState({\n                handleDrag_2: this.state.handleDrag_1\n            }, () => {\n                if (this.state.handleDrag_2 !== \"\" && this.state.handleDragMeasure !== \"\") {\n                    this.props.GetPlotterData({\n                        // measures: [\"Cost\"],\n                        measures: this.state.handleDragMeasure.name,\n                        dimension: this.state.handleDrag_2.name\n                        // dimension: \"Product\"\n                    })\n                }\n            });\n        }\n        else {\n            this.setState({\n                dragError: \"Sorry, should be dropped in Measure\"\n            })\n        }\n        console.log(this.state.handleDrag_2 !== \"\" && this.state.handleDragMeasure !== \"\");\n\n    }\n    onDropMeasure = (event, taskName) => {\n        if (this.state.handleDrag_1.function === \"measure\") {\n            this.setState({\n                handleDragMeasure: this.state.handleDrag_1,\n                dragError: \"\",\n            }, () => {\n                if (this.state.handleDrag_2 !== \"\" && this.state.handleDragMeasure !== \"\") {\n                    this.props.GetPlotterData({\n                        measures: this.state.handleDragMeasure.name,\n                        dimension: this.state.handleDrag_2.name\n                    })\n                }\n            })\n        }\n\n        else {\n            this.setState({\n                dragError: \"Sorry, Should be dropped in Dimension\"\n            })\n        }\n        console.log(this.state.handleDrag_2 !== \"\" && this.state.handleDragMeasure !== \"\");\n    }\n\n    render() {\n        return (\n            <div>\n\n                <div>\n                    <Table bordered>\n                        <caption>\n                            Plotter\n                    </caption>\n                        {this.props.loading === true ? <span className={styles.textLoading}>Loading...</span> : this.props.plotterData.length > 0 ? <Chart></Chart>\n                            : <span className={styles.textLoading}>No Data Please Drag and Drop Dimensions and Measures</span>}\n                        {this.props.data?.map((element, index) => {\n                            return <tr>\n                                <th draggable=\"true\" onDragStart={(event) => this.onDragStart(event, element)} style={{ paddingTop: '45px' }}> {element.name}</th>\n                            </tr>\n                        })}\n\n                    </Table>\n\n                </div>\n                <div className={styles.block_1} onDragOver={(event) => this.onDragOver(event)} onDrop={(event) => this.onDropDimension(event)}>\n                    Dimensions: <span >\n                        {this.state.handleDrag_2.name}</span>\n                    <span onClick={()=>this.setState({handleDrag_2:\"\"})} className={styles.cancelRequest}>X</span>\n\n                </div>\n                <div className={styles.block_2} onDragOver={(event) => this.onDragOver(event)} onDrop={(event) => this.onDropMeasure(event)}>\n                    Measure: <span >\n                        {this.state.handleDragMeasure.name}\n                    </span>\n                    <span onClick={()=>this.setState({handleDragMeasure:\"\"})} className={styles.cancelRequest}>X</span>\n\n                </div>\n                <h1 className={styles.errorStyle}>{this.state.dragError}</h1>\n\n            </div>\n        )\n    }\n}\nconst mapStateToProps = (state) => {\n    return {\n        data: state.DimensionsMeasureReducer.data,\n        plotterData: state.PlotterDataReducer.data,\n        loading: state.PlotterDataReducer.loading\n    };\n};\n\nconst mapDisaptchToProps = (dispatch) => {\n    return {\n        GetDimensionsMeasuresData: (payload) => {\n            dispatch(_GetDimensionsMeasuresData(payload));\n        },\n        GetPlotterData: (payload) => {\n            dispatch(_GetPlotterData(payload));\n        },\n    };\n};\n\nexport default connect(mapStateToProps, mapDisaptchToProps)(PlotterPage);","import {GET_DIMENSION_MEASURE_DATA} from '../../constants/actions_constants'\nexport const _GetDimensionsMeasuresData = (payload) => {\n\n    return {\n        type: GET_DIMENSION_MEASURE_DATA,\n        payload: payload\n    }\n}","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport PlotterPage from './components/plotter_page/plotter_page';\nimport Chart from './sharedpreferences/chart/chart'\n\n\nexport default class App extends React.Component {\n  render() {\n    return (\n\n      <Router>\n        <Switch>\n          <Route path=\"/\" exact component={PlotterPage} />\n          <Route path=\"/chart\" component={Chart} />\n        </Switch>\n      </Router >\n    ) \n  }\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","\nimport {GET_DIMENSION_MEASURE_DATA, GET_DATA_FAIL, GET_DATA_SUCCESS} from '../../constants/actions_constants'\nconst initState = { data: [], loading: false, error: null };\n\nexport default function DimensionsMeasureReducer(state = initState, action) {\n\n    switch (action.type) {\n        case GET_DIMENSION_MEASURE_DATA:\n            return {\n                ...state,\n                loading: true\n            };\n        case GET_DATA_SUCCESS:\n            return {\n                loading: false,\n                data: action.payload,\n                error: null\n            };\n            case GET_DATA_FAIL:\n                return {\n                    loading: false,\n                    error: action.payload\n                };\n        default: return state;\n    }\n}","import {GET_PLOTTER_DATA, GET_PLOTTER_DATA_SUCCESS, GET_PLOTTER_DATA_FAIL} from '../../constants/actions_constants'\nconst initState = { data: [], loading: false, error: null };\n\nexport default function PlotterDataReducer(state = initState, action) {\n\n    switch (action.type) {\n        case GET_PLOTTER_DATA:\n            return {\n                ...state,\n                loading: true\n            };\n        case GET_PLOTTER_DATA_SUCCESS:\n            return {\n                loading: false,\n                data: action.payload,\n                error: null\n            };\n            case GET_PLOTTER_DATA_FAIL:\n                return {\n                    ...state,\n                    loading: false,\n                    error: action.payload\n                };\n        default: return state;\n    }\n}","import { combineReducers } from 'redux';\nimport DimensionsMeasureReducer from './dimensions_measures_reducer'\nimport PlotterDataReducer from './plotter_data_reducer'\n\n\n const rootReducer = combineReducers({\n    DimensionsMeasureReducer,\n    PlotterDataReducer,\n});\nexport default rootReducer;","export const api = {\n    dimensionsMesaures_api: 'https://plotter-task.herokuapp.com/columns',\n    postPlotterData_api: 'https://plotter-task.herokuapp.com/data'\n}","import Axios from 'axios';\nimport { api } from '../../constants/apis.js';\nimport {all, put, call, takeLatest} from 'redux-saga/effects';\nimport {GET_PLOTTER_DATA_SUCCESS, GET_PLOTTER_DATA_FAIL, GET_PLOTTER_DATA} from '../../constants/actions_constants'\n\nasync function getPlotterData(payload) {\n    return Axios.post(api.postPlotterData_api, {\n        \"measures\": [payload.measures],\n        \"dimension\": payload.dimension\n    });\n\n}\nfunction* getPlotterDataSaga(action) {\n    try{\n        const plotterDataResponse= yield call(\n            getPlotterData,\n            action.payload,\n          );\n        console.log(plotterDataResponse);\n        if(plotterDataResponse.status >=200 && plotterDataResponse.status<300){\n            yield put({\n                      type: GET_PLOTTER_DATA_SUCCESS,\n                      payload: plotterDataResponse.data,\n                    });\n        }\n        else{\n            yield put({\n                type: GET_PLOTTER_DATA_FAIL,\n                payload: \"An Error Occured\",\n              });\n        }\n    }\n    catch(err){\n        // console.log(err);\n        yield put({\n            type: GET_PLOTTER_DATA_FAIL,\n            payload: \"An Error Occured\",\n          });\n    }\n      }\nexport default function* rootSaga() {\n    yield all([takeLatest(GET_PLOTTER_DATA, getPlotterDataSaga)]);\n}","import Axios from 'axios';\nimport { api } from '../../constants/apis.js';\nimport {all, put, call, takeLatest} from 'redux-saga/effects';\nimport {GET_DATA_SUCCESS, GET_DATA_FAIL, GET_DIMENSION_MEASURE_DATA} from '../../constants/actions_constants'\n\nasync function getDimensionsMeasuresData() {\n   return Axios.get(api.dimensionsMesaures_api);\n}\nfunction* getDimensionsMeasuresDataSaga(action) {\n    try{\n        const DimensionsMeasuresDataSaga= yield call(\n            getDimensionsMeasuresData\n          );\n        // console.log(\"KOLO\",DimensionsMeasuresDataSaga);\n        if(DimensionsMeasuresDataSaga.status === 200){ \n            yield put({\n                      type: GET_DATA_SUCCESS,\n                      payload: DimensionsMeasuresDataSaga.data,\n                    });\n        }\n        else{\n            yield put({\n                type: GET_DATA_FAIL,\n                payload: \"An Error Occured\",\n              });\n        }\n    }\n    catch(err){\n        console.log(err);\n        yield put({\n            type: GET_DATA_FAIL,\n            payload: \"An Error Occured\",\n          });\n    }\n      }\nexport default function* rootSaga() {\n    yield all([takeLatest(GET_DIMENSION_MEASURE_DATA, getDimensionsMeasuresDataSaga)]);\n}","import {all} from 'redux-saga/effects';\n\nimport getPlotterDataSaga from './plotter_data_saga'\nimport getDimensionsMeasuresData from './dimensions_measures_saga'\n\nexport default function* rootSaga() {\n  yield all([getPlotterDataSaga(),getDimensionsMeasuresData()]);\n}\n","import {applyMiddleware, createStore} from 'redux';\nimport rootReducer from './redux-reducers/main_reducer';\nimport rootSaga from './redux-saga/index';\nimport createSagaMiddleware from 'redux-saga';\nimport {composeWithDevTools} from 'redux-devtools-extension';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst enhancers = [applyMiddleware(sagaMiddleware)];\n\nconst enhancer = composeWithDevTools(...enhancers);\n\nexport const store = createStore(rootReducer, {}, enhancer);\n\nsagaMiddleware.run(rootSaga);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\n// import { createStore } from 'redux';\n// import MainReducers from './redux/redux-reducers/main_reducer';\n// import thunk from 'redux-thunk';\nimport {store} from './redux/index';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n// import {applyMiddleware, createStore} from 'redux';\n// import reducer from '../redux/reducers/index';\n// import rootSaga from '../redux/sagas/index';\n// import createSagaMiddleware from 'redux-saga';\n// import {composeWithDevTools} from 'redux-devtools-extension';\n\n// const sagaMiddleware = createSagaMiddleware();\n\n// const enhancers = [applyMiddleware(sagaMiddleware)];\n\n// const enhancer = composeWithDevTools(...enhancers);\n\n// export const store = createStore(reducer, {}, enhancer);\n\n// sagaMiddleware.run(rootSaga);"],"sourceRoot":""}